using System;
using System.Collections;
using System.IO;

namespace ngram
{
    class CountsBinMaker
    {
        private string _text;
        private int order;
        private Vocab _vocab;
        public CountsBinMaker(string text, int _order)
        {
            _text = text;
            order = _order;
        }
        public void GetVocab()
        {
            _vocab = new Vocab();
            StreamReader sr = new StreamReader(_text);
            int lc = 0;
            while (true)
            {
                string line = sr.ReadLine();
                if (line == null)
                    break;
                string[] words = line.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                int[] wids = _vocab.AddWords(words);
                lc++;
                _vocab.WordCounts += wids.Length + 2;
                if (lc % 1000 == 0)
                    Console.Write("\rLine " + lc);
            }
            _vocab.LineNums = lc;
            sr.Close();
        }
        public void MakeCountsBin()
        {
            GetVocab();
            StreamReader sr = new StreamReader(_text);
            int[] warray = new int[_vocab.WordCounts + (_vocab.LineNums + 1) * Math.Max(0, order - 1)];
            Console.WriteLine();
            BitArray maskarray = new BitArray(_vocab.WordCounts + (_vocab.LineNums + 1) * Math.Max(0, order - 1));
            int linecount = 0;
            int wordcount = 0;
            int maskcount = 0;
            for (int i = 0; i < order - 1; i++)
            {
                warray[wordcount++] = _vocab.BOSIndex;
                maskarray[maskcount++] = false;
            }
            while (true)
            {
                string line = sr.ReadLine();
                if (line == null)
                    break;
                string[] words = line.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                linecount++;
                int[] wids = new int[words.Length + 2];
                int[] getwids = _vocab.GetIndexs(words);
                for (int i = 0; i < getwids.Length; i++)
                    wids[i + 1] = getwids[i];
                wids[0] = _vocab.BOSIndex;
                wids[wids.Length - 1] = _vocab.EOSIndex;
                foreach (int t in wids)
                {
                    warray[wordcount++] = t;
                    maskarray[maskcount++] = true;
                }
                for (int i = 0; i < order - 1; i++)
                {
                    warray[wordcount++] = _vocab.EOSIndex;
                    maskarray[maskcount++] = false;
                }
                if (linecount % 10000 == 0)
                    Console.Write("\rLine " + linecount);
            }
            Console.WriteLine();
            Console.WriteLine(wordcount - warray.Length);
            DateTime dateTime = DateTime.Now;

            Ksarray1(warray, maskarray, order, _vocab.Word2Index.Count);
            Console.WriteLine(DateTime.Now - dateTime);
        }
        public static bool CompareBinFile(string file1, string file2, int xorder)
        {            
            BinaryReader bin1 = new BinaryReader(new FileStream(file1, FileMode.Open));
            BinaryReader bin2 = new BinaryReader(new FileStream(file2, FileMode.Open));
            if (bin1.BaseStream.Length != bin2.BaseStream.Length)
                return false;
            while (bin1.BaseStream.Position < bin1.BaseStream.Length)
            {
                int[] token1 = new int[xorder];
                int[] token2 = new int[xorder];
                for (int i = 0; i < xorder; i++)
                {
                    token1[i] = bin1.ReadInt32();
                    token2[i] = bin2.ReadInt32();
                }
                if (CompareList(token1, token2) != 0)
                    return false;
            }
            bin2.Close();
            bin1.Close();
            return true;
        }
        public static int CompareList(int[] list1, int[] list2)
        {
            if (list1 == null || list2 == null || list1.Length != list2.Length)
                throw new Exception("List null or length not match!");
            for (int i = 0; i < list1.Length - 2; i++)
                if (list1[i] != list2[i])
                    return list1[1] - list2[i];
            return 0;
        }
        void Ksarray1(int[] wa, BitArray bitArray, int order, int max)
        {
            int[] ngrams = new int[order + 1];
            int len = wa.Length - order + 1;
            int[] ccount = new int[max];
            int[] pcount = new int[max + 1];
            int[] sindex = new int[len];
            int[] pindex = new int[len];
            for (int i = 0; i < sindex.Length; i++)
                sindex[i] = i;
            for (int i = 1; i < len; i++)
                ccount[wa[i + order - 1]]++;
            for (int k = 0; k < order; k++)
            {
                for (int i = 0; i < sindex.Length; i++)
                    pindex[i] = sindex[i];
                for (int i = 0; i < pcount.Length; i++)
                    pcount[i] = 0;
                ccount[wa[0 + order - k - 1]]++;
                if (k != 0)
                    ccount[wa[len + order - k - 1]]--; //- 1
                for (int i = 1; i < ccount.Length + 1; i++)
                    pcount[i] = pcount[i - 1] + ccount[i - 1];
                for (int i = 0; i < len; i++)
                {
                    int index = pindex[i] + order - k - 1;
                    sindex[pcount[wa[index]]] = pindex[i];
                    pcount[wa[index]]++;
                }

                {
                    BinaryWriter binaryWriter =
                        new BinaryWriter(new FileStream("index" + (k + 1) + ".bin", FileMode.Create));
                    Console.WriteLine("writing {0} grams", k + 1);
                    bool initial = true;
                    int[] currgram = new int[k + 2];
                    int[] prevrgram = new int[k + 2];
                    if(_vocab.UnkIsWord)
                    {
                        binaryWriter.Write(prevrgram[0]);
                        binaryWriter.Write(prevrgram[1]);
                    }
                    for (int i = 0; i < sindex.Length; i++)
                    {
                        if (bitArray[sindex[i] + order - k - 1] && bitArray[sindex[i] + order - 1])
                        {
                            for (int j = sindex[i] + order - k - 1; j <= sindex[i] + order - 1; j++)
                                currgram[j - (sindex[i] + order - k - 1)] = wa[j];
                            currgram[k + 1] = 1;
                            if (initial)
                            {
                                for (int j = 0; j < currgram.Length; j++)
                                    prevrgram[j] = currgram[j];
                                initial = false;
                                continue;
                            }
                            {
                                bool equal = true;
                                for (int j = 0; j < currgram.Length - 1; j++)
                                    if (currgram[j] != prevrgram[j])
                                    {
                                        equal = false;
                                        break;
                                    }
                                if (equal)
                                    prevrgram[k + 1]++;
                                else //output
                                {
                                    ngrams[k + 1]++;
                                    foreach (int gram in prevrgram)
                                        binaryWriter.Write(gram);
                                    for (int j = 0; j < currgram.Length; j++)
                                        prevrgram[j] = currgram[j];
                                }
                            }
                        }
                    }
                    foreach (int gram in prevrgram)
                        binaryWriter.Write(gram);
                    ngrams[k + 1]++;
                    binaryWriter.Close();
                }
            }
            Console.WriteLine();
        }
    }
}