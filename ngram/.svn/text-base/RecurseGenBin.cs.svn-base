using System;
using System.Collections.Generic;
using System.IO;

namespace ngram
{
    unsafe class RecurseGenBin
    {
        public RecurseGenBin(int _order)
        {
            order = _order;
        }
        private BinaryReader[] binaryReaders;
        private int order;
        public int[] Ngramcounts;
        private string _lmbin;
        private int[] _prevFillLocation;
        private int[] _currFillLocation;
        private BinaryFile _binaryFile;
        public byte* InnerPtr
        {
            get { return _binaryFile.InnerPtr; }
        }
        public byte* FinalPtr
        {
            get { return _binaryFile.FinalPtr; }
        }
        public List<int> PAccCount
        {
            get { return _binaryFile.PAccCount; }
        }
        void ReadBin()
        {
            binaryReaders = new BinaryReader[order];
            for (int i = 0; i < order; i++)
                binaryReaders[i] = new BinaryReader(new FileStream("index" + (i + 1) + ".bin", FileMode.Open));
        }

        private int[][] prevNGrams;
        private int[][] currNGrams;
        public void GenBin(string lmbin)
        {
            prevNGrams = new int[order][];
            currNGrams = new int[order][];
            for (int i = 0; i < order; i++)
            {
                currNGrams[i] = new int[i + 2];
                prevNGrams[i] = new int[i + 2];
            }
            prevNGrams[0] = new[] {-1, -1};
            _lmbin = lmbin;
            Ngramcounts = new int[order];
            _currFillLocation = new int[order + 1]; //current filled location
            _prevFillLocation = new int[order + 1]; //current filled location
            ReadBin();
            for (int i = 0; i < order; i++)
                Ngramcounts[i] = (int) (binaryReaders[i].BaseStream.Length/(sizeof (int)*(i + 2)));
            _binaryFile = new BinaryFile(_lmbin, Ngramcounts);

            _finalAppends = new bool[order];
            for (int i = 0; i < _finalAppends.Length; i++)
                _finalAppends[i] = true;
            //for (int level = 1; level <= order; level++)
            RecurseRead(order);
       
            foreach (BinaryReader t in binaryReaders)
                t.Close();
            for (int i = 0; i < order - 1; i++)
            {
                InnerNode innerNode = new InnerNode
                {
                    Index = 0x00ff00ff,
                    Count = 0x00ee00ee,
                    Child = Ngramcounts[i + 1]
                };
                ((InnerNode*)InnerPtr)[PAccCount[i + 1] - 1] = innerNode;
            }
            {
                LeafNode leafNode = new LeafNode { Index = 0x00ff00ff, Count = 0x00ee00ee };
                ((LeafNode*)FinalPtr)[Ngramcounts[Ngramcounts.Length - 1]] = leafNode;
            }
        }

        private bool[] _finalAppends;
        public void RecurseRead(int level)
        {
            while (_finalAppends[level - 1])
            {
                if (binaryReaders[level - 1].BaseStream.Position >= binaryReaders[level - 1].BaseStream.Length)
                {
                    _finalAppends[level - 1] = false;
                    for (int i = 0; i < level; i++)
                        currNGrams[level - 1][i] = int.MaxValue;
                }
                else
                {
                    for (int i = 0; i < level + 1; i++)
                        currNGrams[level - 1][i] = binaryReaders[level - 1].ReadInt32();
                }
                //if (level == 1)
                //    Console.WriteLine();
                int gramMatchIndex = int.MinValue;
                for (int i = 0; i < level; i++)
                    if (currNGrams[level - 1][i] == prevNGrams[level - 1][i])
                        gramMatchIndex = i + 1;
                    else
                        break;             
                if (gramMatchIndex == level)
                    throw new Exception("error! duplicated ngrams");
                if (level == order)
                {
                    LeafNode leafNode;
                    leafNode.Prob = 0;
                    leafNode.Count = currNGrams[level - 1][currNGrams[level - 1].Length - 1];
                    leafNode.Index = currNGrams[level - 1][currNGrams[level - 1].Length - 2];
                    ((LeafNode*) FinalPtr)[_currFillLocation[level - 1]] = leafNode;
                }
                else
                {
                    InnerNode innerNode;
                    innerNode.Bow = 0;
                    innerNode.Prob = 0;
                    innerNode.Child = _prevFillLocation[level];
                    innerNode.Count = currNGrams[level - 1][currNGrams[level - 1].Length - 1];
                    innerNode.Index = currNGrams[level - 1][currNGrams[level - 1].Length - 2];
                    ((InnerNode*) InnerPtr)[PAccCount[level - 1] + _currFillLocation[level - 1]] = innerNode;
                }
                //if (_finalAppends[level - 1])                  
                _currFillLocation[level - 1]++;

                bool matchPrefix = true;
                if (level < order)
                {
                    for (int i = 0; i < currNGrams[level - 1].Length - 1; i++)
                        if (currNGrams[level - 1][i] < currNGrams[level][i])
                        {
                            matchPrefix = false;
                            break;
                        }
                }
                for (int i = 0; i < currNGrams[level - 1].Length; i++)
                    prevNGrams[level - 1][i] = currNGrams[level - 1][i];
                if (gramMatchIndex < level - 1 && level > 1)
                    RecurseRead(level - 1);
                _prevFillLocation[level - 1] = _currFillLocation[level - 1];
                if (gramMatchIndex < level - 1 && !matchPrefix && _finalAppends[level])
                    continue;                
                if (level != order && matchPrefix)
                    break;
            }
        }

        /*{
                //(gramMatchIndex == order - 1)
                LeafNode leafNode;
                leafNode.Prob = 0;
                leafNode.Count = prevLeafNGrams[prevLeafNGrams.Length - 1];
                leafNode.Index = prevLeafNGrams[prevLeafNGrams.Length - 2];
                ((LeafNode*)FinalPtr)[_currFillLocation[order - 1]] = leafNode;
                _currFillLocation[order - 1]++;
                for (int i = 0; i < currLeafNGrams.Length; i++)
                    prevLeafNGrams[i] = currLeafNGrams[i];

                for (int i = order - 2; i >= 0; i--)
                {
                    while (binaryReaders[i].BaseStream.Position < binaryReaders[i].BaseStream.Length)
                    {
                        int[] grams = new int[i + 2];
                        for (int j = 0; j <= i + 1; j++)
                            grams[j] = binaryReaders[i].ReadInt32();
                        InnerNode innerNode;
                        innerNode.Prob = 0;
                        innerNode.Bow = 0;
                        innerNode.Count = grams[grams.Length - 1];
                        innerNode.Index = grams[grams.Length - 2];
                        innerNode.Child = _prevFillLocation[i + 1];
                        _prevFillLocation[i + 1] = _currFillLocation[i + 1];
                        ((InnerNode*)InnerPtr)[PAccCount[i] + _currFillLocation[i]] = innerNode;
                        _currFillLocation[i]++;
                        ReadUtilMatch(i, grams);
                    }
                }
            }
          */       
    }
}